
# imports
# coding: utf-8

import xml.etree.ElementTree as ET
import sqlite3 as SQL 

# initialize
conn = SQL.connect('tracks_my.sqlite') 
cur = conn.cursor()

# set up tables

cur.executescript('''
	DROP TABLE IF EXISTS Artist;
	DROP TABLE IF EXISTS Album;
	DROP TABLE IF EXISTS Genre;
	DROP TABLE IF EXISTS Track;

	CREATE TABLE Artist(
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
		name TEXT UNIQUE
	);

	CREATE TABLE Album(
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
		artist_id INTEGER,
		name TEXT UNIQUE
	);

	CREATE TABLE Genre(
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
		name TEXT UNIQUE
	);

	CREATE TABLE Track(
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
		name TEXT,
		album_id INTEGER,
		artist_id INTEGER,
		count INTEGER,
		rating INTEGER,
		length INTEGER
	)

	''')

# read file

filename = 'Library.xml'
stuff = ET.parse(filename)
tree = stuff.findall('dict/dict/dict')

# define lookup function
# Observe that the xml structure always starts with <key> text </key>
# And the following tag always changes per specific attributes of the item
# Therefore once we find a match in <key> and text
# set the boolean to True and iterate to the next cycle to retrieve the text in the next attribute

def lookup(tree, key):
	found = False
	for item in tree:
		if found == True: return item.text
		if item.tag == 'key' and item.text == key: found = True
	return None
 
for entry in tree:
	if lookup(entry, 'Track ID') is None: continue
	name = lookup(entry, 'Name')
	artist = lookup(entry, 'Artist')
	album = lookup(entry, 'Album')
	genre = lookup(entry, 'Genre')
	count = lookup(entry, 'Play Count')
	rating = lookup(entry, 'Rating')
	length = lookup(entry, 'Total Time')

	# take out the incomplete entries
	if name is None or artist is None or album is None or genre is None: continue
	print 'name:', name, ' artist:', artist, 'album:', album, 'genre:', genre, 'count:', count, 'rating:', rating, 'length:', length

	#write data into sql

	#Write artist info into artist table and retrieve artist_id (autogenerated)
	cur.execute(
		'''INSERT OR IGNORE INTO Artist (name) VALUES ( ? )''', (artist,))
	cur.execute('''SELECT id FROM Artist WHERE name = ? ''', (artist, ))
	#print 'artist_id =', cur.fetchone()
	artist_id = cur.fetchone()[0]

	#Write album info into album table and retrieve album_id (autogenerated)
	cur.execute(
		'''INSERT OR IGNORE INTO Album (artist_id, name) VALUES (?, ?)''', (artist_id, album))
	cur.execute(
		'''SELECT id FROM Album WHERE name = ?''', (album,))
	album_id = cur.fetchone()[0]

	#Write genre info into genre table and retrieve genre_id (autogenerated)

	cur.execute(
		''' INSERT OR IGNORE INTO Genre (name) VALUES (?)''', (genre,))
	cur.execute(
		''' SELECT id FROM Genre WHERE name = ?''', (genre,))
	genre_id = cur.fetchone()[0]

	#Write track information into the track table linking autogenerated artist_id, album_id, genre_id
	cur.execute(
		'''INSERT OR REPLACE INTO Track (name, album_id, artist_id, count, rating, length) 
		VALUES (?, ?, ?, ?, ?, ?)''', (name, album_id, artist_id, count, rating, length))

	#close out
	conn.commit()

print 'Total count:', len(tree)


